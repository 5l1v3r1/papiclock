#!/usr/bin/env python

# Copyright 2013-2015 Pervasive Displays, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#   http:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied.  See the License for the specific language
# governing permissions and limitations under the License.

import os
import sys

from PIL import Image
from PIL import ImageDraw
from PIL import ImageFont
from datetime import datetime
import time
from papirus import Papirus

# Check EPD_SIZE is defined
EPD_SIZE=0.0
if os.path.exists('/etc/default/epd-fuse'):
    execfile('/etc/default/epd-fuse')
if EPD_SIZE == 0.0:
    print("Please select your screen size by running 'papirus-config'.")
    sys.exit()

# Running as root only needed for older Raspbians without /dev/gpiomem
if not (os.path.exists('/dev/gpiomem') and os.access('/dev/gpiomem', os.R_OK | os.W_OK)):
    user = os.getuid()
    if user != 0:
        print("Please run script as root")
        sys.exit()

WHITE = 1
BLACK = 0

CLOCK_FONT_FILE = '/usr/share/fonts/truetype/freefont/FreeMonoBold.ttf'
DATE_FONT_FILE  = '/usr/share/fonts/truetype/freefont/FreeMonoBold.ttf'
METEO_FONT_FILE  = '/usr/share/fonts/truetype/freefont/FreeMono.ttf'


CLOCK_WEEKDAYS = ["LUN", "MAR", "MER", "JEU", "VEN", "SAM", "DIM"]
CLOCK_MONTHS   = ["JAN", "FEV", "MAR", "AVR", "MAI", "JUN", "JUL", "AOU", "SEP", "OCT", "NOV", "DEC"]

class ClockDims:
    def __init__(self, screen_width, screen_height):
        self.screen_width = screen_width,
        self.screen_height = screen_width,
        self.top_margin = 1
        self.left_margin = 2
        self.clock_interline = -2
        self.clock_font_size = int((screen_width - self.left_margin)/(8*0.65))     # 8 chars HH:MM:SS
        self.date_font_size = int((screen_width - self.left_margin)/(10*0.65))     # 10 chars YYYY-MM-DD
        self.meteo_font_size = int((screen_width - self.left_margin)/(23*0.65))    # 4*5 + 3 chars
        self.clock_y = self.top_margin + 2*self.clock_interline
        self.date_y = self.clock_y + self.clock_font_size + 2*self.clock_interline
        self.sep_y = self.date_y + self.date_font_size
        self.meteo_y = []
        for i in range(4):
            self.meteo_y.append(self.clock_font_size + self.date_font_size + 2*self.clock_interline + i*self.meteo_font_size)
        self.sep_x = []    
        for i in range(4):
            self.sep_x.append(self.left_margin + int((screen_width - self.left_margin)*((5.5*i)/24.0)))

def main(argv):

    """main program - draw and display time and date"""

    papirus = Papirus(rotation = int(argv[0]) if len(sys.argv) > 1 else 0)

    print('panel = {p:s} {w:d} x {h:d}  version={v:s} COG={g:d} FILM={f:d}'.format(p=papirus.panel, w=papirus.width, h=papirus.height, v=papirus.version, g=papirus.cog, f=papirus.film))

    papirus.clear()

    demo(papirus)

def format_time(now):
    return '{h:02d}:{m:02d}:{s:02d}'.format(h=now.hour, m=now.minute, s=now.second)

def format_date(now):
    return '{dow} {d:02d} {moy}'.format(dow=CLOCK_WEEKDAYS[now.weekday()], d=now.day, moy=CLOCK_MONTHS[now.month - 1])

def meteo_test():
    return [
        '14:00 17:00 20:00 23:00',
        "1015  1016  1015  1014",
        "30    31    30    28",
        "17 33505 33005  31007"
    ]

def demo(papirus):
    """simple partial update demo - draw a clock"""

    # initially set all white background
    image = Image.new('1', papirus.size, WHITE)

    # prepare for drawing
    draw = ImageDraw.Draw(image)
    width, height = image.size

    # get and init the clock constant dimensions
    cd = ClockDims(width, height)

    clock_font = ImageFont.truetype(CLOCK_FONT_FILE, cd.clock_font_size)
    date_font = ImageFont.truetype(DATE_FONT_FILE, cd.date_font_size)
    meteo_font = ImageFont.truetype(METEO_FONT_FILE, cd.meteo_font_size)

    # clear the display buffer
    draw.rectangle((0, 0, width, height), fill=WHITE, outline=WHITE)
    previous_second = 0
    previous_day = 0
    
    while True:
        while True:
            now = datetime.today()
            if now.second != previous_second:
                break
            time.sleep(0.1)

        if now.day != previous_day:
            draw.rectangle((0, 0, width - 1, height - 1), fill=WHITE, outline=BLACK) # outer line
            draw.text((cd.left_margin, cd.date_y), format_date(now), fill=BLACK, font=date_font) # date
            meteo_array = meteo_test()
            for i in range(4):
                draw.text((cd.left_margin, cd.meteo_y[i]), meteo_array[i], fill=BLACK, font=meteo_font)
            draw.line((0, cd.sep_y, width - 1, cd.sep_y), fill=BLACK   )
            for i in range(1,4):
                draw.line((cd.sep_x[i], cd.sep_y, cd.sep_x[i], height - 1), fill=BLACK)
            previous_day = now.day
        else:
            draw.rectangle((cd.left_margin, cd.top_margin, width - cd.left_margin, cd.clock_y + cd.clock_font_size), fill=WHITE, outline=WHITE)

        if now.second % 2 == 0:
            draw.text((cd.left_margin, cd.clock_y), format_time(now), fill=BLACK, font=clock_font) # time

        # display image on the panel
        papirus.display(image)
        
        if now.second == 0:
            papirus.update()    # full update every minute
        elif now.second % 2 == 0:
            papirus.partial_update()
            
        previous_second = now.second

# main
if "__main__" == __name__:
    if len(sys.argv) < 1:
        sys.exit('usage: {p:s}'.format(p=sys.argv[0]))

    try:
        main(sys.argv[1:])
    except KeyboardInterrupt:
        sys.exit('interrupted')
        pass
